#!/usr/bin/env python
#
# Developed by Gregor von Laszewski for the MOOC, laszewski@gmail.com 
#
# getcharacter is based on http://stackoverflow.com/questions/1829/how-do-i-make-a-menu-that-does-not-require-the-user-to-press-enter-to-make-a-s
#
# all other code based on Gregors early version of cloudmesh
#
#from blessings import Terminal
import textwrap
import os
import sys
import select
import termios
import tty
from sh import ssh
from sh import nova
from sh import heat
from sh import cat
from sh import fgrep



######################################################################
# Terminal related methods
######################################################################

"""
# blessings not properly installed on india
term = Terminal()
(terminal_height, terminal_width) = os.popen(
    'stty size', 'r').read().split()


def _line(name):
    n = len(name)
    return '==', name, (int(terminal_width) - n - 4) * '='


def _tline(name):
    n = len(name)
    return '%s== %s %s%s\n' % (term.white + term.on_blue, name,
                               (int(terminal_width) - n - 4) * '=',
                               term.normal)


print _line("first")

print _tline("second")

print
sys.exit()
"""


def logo():
    banner = textwrap.dedent("""
                          FutureGrid - Cloud Mesh MOOC Shell
            ------------------------------------------------------
               ____ _                 _   __  __           _
              / ___| | ___  _   _  __| | |  \/  | ___  ___| |__
             | |   | |/ _ \| | | |/ _` | | |\/| |/ _ \/ __| '_ \ 
             | |___| | (_) | |_| | (_| | | |  | |  __/\__ \ | | |
              \____|_|\___/ \__,_|\__,_| |_|  |_|\___||___/_| |_|
            ======================================================
            """)
    return banner	

print logo()

username = os.getenv("OS_USERNAME")
tenant = os.getenv("OS_TENANT_NAME")
keyname = "%s-key" % (username)

if tenant != "fg380":
    print "Please change your novarc file and change the tenant name to fg380"
    print "The file is located at ~/.futuregrid/openstack_havana/novarc"
    sys.exit()

def getcharater():
    old_settings = termios.tcgetattr(sys.stdin)
    tty.setraw(sys.stdin.fileno())
    select.select([sys.stdin], [], [], 0)
    answer = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    return answer

def add_message_if_missing(filename, message):
    os.system("touch " + filename)
    file = open(filename, 'rw')
    lines = file.readlines()
    file.close()
    res = filter(lambda x: message in x, lines)
    if len(res) == 0:
        with open("test.txt", "a") as f:
            f.write(str(message) + "\n")

def start_vm():
    vms = nova("--os-username", username, "--os-tenant-name", tenant, "list").split("\n")[3:-2]
    print vms
    print "start vm ..."

def start_stack_vm():
    try:
        print "start stack vm ..."
        vms =  heat("stack-create","-f","/share/project/FG380/bigdata_mooc.yaml", "-P", "KeyName=%s" % keyname, username)
        print vms
    except:
        print "ERROR: stack creation failed."
        print "Remember to run only one stack"
 
def suspend_vm():
    print "suspend vm ..."

def resume_vm():
    print "resume vm ..."

def list_vm():
    print "list vm ..."
    r = nova("--os-username", username, "--os-tenant-name", tenant, "list")
    print r

def list_stack():
    print "list stack ..."
    r = heat("stack-list")
    print r

def delete_stack():
    print "delete stack ..."
    r = heat("stack-delete",username)
    print r

def stack_suspend():
    print "suspend stack ..."
    r = heat("action-suspend",username)
    print r

def stack_resume():
    print "resume stack ..."
    r = heat("action-resume",username)
    print r

def delete_key():
    try:
        r = nova("keypair-delete", keyname)
        r = nova("keypair-list")
        print r
    except:
        print "key not found"
        
def upload_key():

    print "probing keys ..."

    names = []
    try:
        r = nova("keypair-list")
        keys = r.split("\n")[3:-2]
        for key in keys:
            (prefix, name, fingerprint, postfix) = key.split("|")
            names.append(name.strip())
    except:
        print "no key yet uploaded"

    if keyname in names:
        print "You already have a key with the name %s." % keyname
    else:
        try:
            os.system("nova keypair-add %s > ~/%s" % (keyname, keyname))
            os.system("chmod 600 ~/%s" % (keyname))
        except:
            print "some error occured, yo probably have already a key uploaded"
    print 
    r = nova("keypair-list")
    print r

def get_ip_from_stack():
    r = fgrep (heat("resource-show", username, "server"), "physical_resource_id")
    vms = r.split("\n")
    physical_resource_id  = vms[0].split("|")[2].strip()
    r = nova("show", physical_resource_id)
    network = fgrep (r, "private network")
    ips = network.split("|")[2].strip()
    (private_ip,public_ip) = ips.replace(" ","").split(",")
    return public_ip
    
def login():
    print "login vm ..."
    ip = get_ip_from_stack()
    os.system("ssh -X -i %s %s" % (os.path.expanduser("~/%s" % keyname), "root@%s" % ip))


def is_account_created():
    if(os.path.isfile('~/.futuregrid/openstack_havana/fg380')):
       print "Account Creation Successful!!!"
    else:
       print "Your Openstack account is not yet created. It may take a day for this to happen. Please note no accounts will be created in hours outside of Mo-Fr 10am - 4pm EST"
       sys.exit()

def get_first_stack_vm_id():
    try:
        r = fgrep (heat("stack-list"), username)
        print "Your vms are:"
        
        print r
        vms = r.split("\n")
        (prefix, id, rest, x, y, z) = vms[0].split("|")
        id = id.strip()
        print "ID = %s" % id
    except:
        print "I coudl not find a vm for you, did you start one?"


try:
    list_stack()
except:
    print "ERROR: you may not be in this project."
    print "Please make sure on the portal that you are added to the members of the project."
    sys.exit()
    


#def setup_bashrc():#
#
#    filename = "test.txt"
#    add_message_if_missing(filename, "module load novaclient")
#    add_message_if_missing(filename, "module load heatclient")
#    add_message_if_missing(filename, "source ~/.futuregrid/openstack_havana/novarc")
#    print "bashrc file created"
#    print 70 * '-'
#    r = cat(filename)
#    print r
#    print 70 * '-'
    
#uploading SSH key to the cloud


#Managing Securiy Groups
# nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
# nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
# nova secgroup-list-rules default


    
cont = True
while cont:
    print 
    print """Cloudmesh MOOC FG380 Menu"""
    print 70*'-'
    print "user  : %s" % (username)
    print "tenant: %s" % (tenant)
    print "key   : %s" % (keyname)
    print 70*'-'

    print """

    == Keys ==================     == VM ====================

       1) upload                      3) start  
       2) delete                      4) suspend 
                                      5) resume 
    == Login =================        6) list 
                                      7) delete
       9) login 
                                   
    == Quit =================      == IP =====================
                                      
       q) Quit cm-mooc               8) list public ip
		== Account Status =======
		   0) Account Status
    """ 
    answer=getcharater()

    if "1" in answer:
        upload_key()
    elif "2" in answer:
        delete_key()

    elif "3" in answer:
        start_stack_vm()
    elif "4" in answer:
        stack_suspend()
    elif "5" in answer:
        stack_resume()
    elif "6" in answer:
        list_stack()
    elif "7" in answer:
        delete_stack()
    elif "8" in answer:
        print "retreiving public ip ..."
        try:
            ip = get_ip_from_stack()
            print "Public IP: ", ip
        except:
            print "no ip found"
    elif "9" in answer:
        login()
    elif "0" in answer:
       is_account_created()
#    elif "0" in answer:
#        setup_bashrc()
    elif answer in "qQxX":
        cont = False
                        
